"""empty message

Revision ID: ef682cf044b3
Revises: 
Create Date: 2024-04-25 18:43:20.976164

"""
from typing import Sequence, Union
import sqlmodel
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ef682cf044b3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('Name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('about', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('date_joined', sa.Date(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_users_Name'), 'users', ['Name'], unique=False)
    op.create_table('problemstatement',
    sa.Column('Name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('problemstatment', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_date', sa.Date(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_problemstatement_Name'), 'problemstatement', ['Name'], unique=True)
    op.create_table('like',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('problemstatement_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['problemstatement_id'], ['problemstatement.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('solution',
    sa.Column('solution', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('solution_link', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('date_submitted', sa.Date(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('problemstatment_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['problemstatment_id'], ['problemstatement.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('wishlist',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('problemstatement_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['problemstatement_id'], ['problemstatement.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('wishlist')
    op.drop_table('solution')
    op.drop_table('like')
    op.drop_index(op.f('ix_problemstatement_Name'), table_name='problemstatement')
    op.drop_table('problemstatement')
    op.drop_index(op.f('ix_users_Name'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
